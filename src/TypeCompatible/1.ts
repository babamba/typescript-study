export {};

// 타입 호환성은 어떤 타입을 다른 타입으로 취급해도되는지 판단하는것
// 정적타입언어의 가장 중요한 역할은
// 타입 호환성을 통해 컴파일 타임에 호환되지 않는 타입을 찾아내는 것이다.

// 어떤 변수가 다른 변수에 할당 가능하기 위해서는
// 해당 변수의 타입이 다른쪽변수의 타입에 할당 가능해야 한다.

// 할당가능을 판단할 때는 타입이 가질 수 있는 값의 집합을 생각하면 된다.

function func1(a: number, b: number | string) {
  const v2: number = b;
  // 숫자와 문자열로 이루어진 값의 집합이
  // 숫자로만 이루어진 값의 집합보다 더 크기때문에
  // 더 큰 값의 집합을 더 작은값의 집합으로 넣을 수가 없기때문에 에러 . 할당 불가
  const v1: number | string = a;
  // 작은 집합은 큰 집합 요소에 넣을 수 있다.
}

function func2(a: 1 | 2) {
  const v1: 1 | 3 = a;
  const v2: 1 | 2 | 3 = a;
}
